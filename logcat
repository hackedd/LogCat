#!/usr/bin/python

import gtk
import gobject

import sys
from time import strftime
from multiprocessing import Queue

from FileTail import FileTail, SSHFileTail
from LogParser import ApacheErrorLogParser

def getTail(filename):
	if filename.startswith("ssh://"):
		nextSlash = filename.find("/", 6)
		server = filename[6:nextSlash]
		filename = filename[nextSlash:]
		return SSHFileTail(server, filename)

	return FileTail(filename)

class ListWrapper(gobject.GObject):
	def __init__(self, values):
		gobject.GObject.__init__(self)
		if isinstance(values, list) or isinstance(values, tuple):
			self.list = values[:]
		else:
			self.list = [values]
	
	def getList(self):
		return self.list

class LogCatTab(gtk.ScrolledWindow):
	TYPE, MESSAGE, COUNT, LAST_SEEN_STR, LAST_SEEN, ALL = range(6)
	TYPES = (str, str, int, str, object, gobject.TYPE_PYOBJECT)
	NAMES = ("Type", "Message", "Count", "Last Seen")

	DATE_FORMAT = "%Y-%m-%d %H:%M"

	def __init__(self):
		gtk.ScrolledWindow.__init__(self)
		self.store = gtk.ListStore(*self.TYPES)

		self.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
		self.treeView = gtk.TreeView(self.store)
		self.treeView.connect("row-activated", self.on_row_activated)
		self.add(self.treeView)

		for idx, colname in enumerate(self.NAMES):
			col = gtk.TreeViewColumn(colname, gtk.CellRendererText(), text = idx)
			self.treeView.append_column(col)
			
			col.set_resizable(True)
			col.set_sort_column_id(idx)

			if colname == "Message":
				col.set_expand(True)
	
	def addError(self, error):
		for idx, row in enumerate(self.store):
			if row[self.MESSAGE] == error["message"]:
				row[self.COUNT] += 1
				row[self.ALL].getList().append(error.copy())

				if error["date"] > row[self.LAST_SEEN]:
					row[self.LAST_SEEN] = error["date"]
					row[self.LAST_SEEN_STR] = strftime(self.DATE_FORMAT, error["date"])

				break
		else:
			messageType = error["message_type"] if error["message_type"] else "None"
			lastSeenStr = strftime(self.DATE_FORMAT, error["date"])
			self.store.append((messageType, error["message"], 1, lastSeenStr, error["date"], ListWrapper(error.copy())))
	
	def on_row_activated(self, widget, path, column):
		row = self.store[path]
		print row[self.ALL].getList()

class LogCatWindow(gtk.Window):
	def __init__(self, filenames):
		gtk.Window.__init__(self, gtk.WINDOW_TOPLEVEL)

		self.set_title("LogCat")
		self.set_size_request(400, 400)
		self.connect("delete_event", self.on_delete_event)
		self.connect("destroy", self.on_destroy)

		notebook = gtk.Notebook()

		self.parser = ApacheErrorLogParser()
		# Both use the FD number as index
		self.tails = {}
		self.tabs = {}

		tab = LogCatTab()
		self.tabs[None] = tab
		label = gtk.Label("Overall")
		notebook.append_page(tab, label)

		for filename in filenames:
			tail = getTail(filename)
			fd = tail.getFD()
			tab = LogCatTab()

			self.tails[fd] = tail
			self.tabs[fd] = tab

			tail.start()

			label = gtk.Label(tail.getTitle())
			notebook.append_page(tab, label)

			gobject.io_add_watch(fd, gobject.IO_IN, self.on_io)

		self.add(notebook)
		self.show_all()
		self.show()

	def on_delete_event(self, widget, event):
		for fd, tail in self.tails.iteritems():
			tail.requestStop()
			print "Waiting for %s to quit..." % tail.getTitle()
			tail.join()
		return False

	def on_destroy(self, widget):
		gtk.main_quit()

	def on_io(self, fd, cond):
		line = self.tails[fd].getQueue().get()
		parsed = self.parser.parseLine(line)

		self.tabs[fd].addError(parsed)
		self.tabs[None].addError(parsed)
		return True

if __name__ == "__main__":
	if len(sys.argv) < 2:
		print >>sys.stderr, "Usage: %s Files..." % sys.argv[0]
		sys.exit(1)

	# q = Queue()
	# #ft = FileTail(sys.argv[1], q)
	# ft = SSHFileTail("eco1", "/var/log/apache2/beverwedstrijd_error.log", q)
	# ft.start()

	# lp = 

	# #for _ in range(5):
	# while True:
	# 	line = q.get()

	# 	parsed = lp.parseLine(line)
	# 	for k, v in parsed.iteritems():
	# 		print "%s: %s" % (k, v)
	# 	print
	
	# ft.requestStop()
	# ft.join()

	w = LogCatWindow(sys.argv[1:])
	gtk.main()