#!/usr/bin/python

import gtk
import gobject

import sys
import locale
from time import strftime
from datetime import datetime
from multiprocessing import Queue

from FileTail import FileTail, SSHFileTail
from LogParser import parseLine
from Color import HSVtoRGB

def getTail(filename):
	if filename.startswith("ssh://"):
		nextSlash = filename.find("/", 6)
		server = filename[6:nextSlash]
		filename = filename[nextSlash:]
		return SSHFileTail(server, filename)

	return FileTail(filename)

class ListWrapper(gobject.GObject):
	def __init__(self, values):
		gobject.GObject.__init__(self)
		if isinstance(values, list) or isinstance(values, tuple):
			self.list = values[:]
		else:
			self.list = [values]
	
	def getList(self):
		return self.list

class LogCatTab(gtk.ScrolledWindow):
	TYPE, MESSAGE, COUNT, LAST_SEEN_STR, LAST_SEEN, COLOR, ALL = range(7)
	TYPES = (str, str, int, str, object, str, gobject.TYPE_PYOBJECT)
	NAMES = ("Type", "Message", "Count", "Last Seen")

	DATE_FORMAT = "%Y-%m-%d %H:%M"

	def __init__(self, mainWindow):
		gtk.ScrolledWindow.__init__(self)

		self.mainWindow = mainWindow
		self.store = gtk.ListStore(*self.TYPES)

		self.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
		self.treeView = gtk.TreeView(self.store)
		self.treeViewSelection = self.treeView.get_selection()
		self.treeViewSelection.connect("changed", self.on_selection_changed)
		self.add(self.treeView)

		for idx, colname in enumerate(self.NAMES):
			col = gtk.TreeViewColumn(colname, gtk.CellRendererText(), text = idx, background = self.COLOR)
			self.treeView.append_column(col)
			
			col.set_resizable(True)
			col.set_sort_column_id(idx)

			if colname == "Message":
				col.set_expand(True)

		self.colorTime = 5
		self.colors = []
		for s in range(60, -1, -1):
			r, g, b = HSVtoRGB(30.0, s / 60.0, 1.0)
			self.colors.append("#%02x%02x%02x" % (r * 0xff, g * 0xff, b * 0xff))
		
		gobject.timeout_add(self.colorTime * 1000, self.on_update_colors)
	
	def addError(self, error):
		for row in self.store:
			if row[self.MESSAGE] == error["message"]:
				row[self.COUNT] += 1
				row[self.ALL].getList().append(error.copy())

				if error["date"] > row[self.LAST_SEEN]:
					row[self.LAST_SEEN] = error["date"]
					row[self.LAST_SEEN_STR] = strftime(self.DATE_FORMAT, error["date"])
					row[self.COLOR] = self.getColor(error["date"])
				break
		else:
			messageType = error["messageType"] if error["messageType"] else "Unknown"
			lastSeenStr = strftime(self.DATE_FORMAT, error["date"])
			self.store.append((messageType, error["message"], 1, lastSeenStr, error["date"], self.getColor(error["date"]), ListWrapper(error.copy())))
		
	def getColor(self, lastSeen):
		delta = datetime.now() - datetime(*lastSeen[0:6])
		if delta.days or delta.seconds > self.colorTime * len(self.colors):
			idx = -1
		else:
			idx = int(delta.seconds / self.colorTime)
			#print datetime(*lastSeen[0:6]), delta.seconds, self.colorTime, idx
		return self.colors[idx]

	def on_selection_changed(self, selection):
		model, paths = self.treeViewSelection.get_selected_rows()
		if len(paths) > 0:
			row = model[paths[0]]
			list = row[self.ALL].getList()
		else:
			list = None

		self.mainWindow.setDetails(list)
	
	def on_update_colors(self):
		lastColor = self.colors[-1]
		for row in self.store:
			if row[self.COLOR] != lastColor:
				row[self.COLOR] = self.getColor(row[self.LAST_SEEN])
		return True

from collections import defaultdict

class LogCatDetails(gtk.ScrolledWindow):
	def __init__(self, mainWindow):
		gtk.ScrolledWindow.__init__(self)
		self.mainWindow = mainWindow
	
		self.set_size_request(-1, 50)
		self.textView = gtk.TextView()
		self.add(self.textView)
		self.setText("Click any error above to get details")

	def setText(self, text):
		buf = self.textView.get_buffer()
		buf.delete(buf.get_start_iter(), buf.get_end_iter())
		buf.insert(buf.get_start_iter(), text)
	
	def setErrorList(self, errorList):
		if not errorList:
			self.setText("Click any error above to get details")
			return

		msgType = errorList[0]["messageType"] if errorList[0]["messageType"] else "Unknown"
		msgDetails = errorList[0]["messageParsed"] if errorList[0]["messageType"] else {}
		
		lines = []
		lines.append("Message: %s" % errorList[0]["message"])
		lines.append("Type: %s" % errorList[0]["messageType"])

		for key in sorted(msgDetails.keys()):
			lines.append("  " + key + ": " + msgDetails[key])
		
		N = 10

		clients = defaultdict(int)
		referers = defaultdict(int)
		for message in errorList:
			clients[message["client"]] += 1
			referers[message["referer"]] += 1

		sortedClients = sorted([(v, k) for (k, v) in clients.iteritems()], reverse = True)[0:N]
		lines.append("Clients (Top %d):" % len(sortedClients))
		for count, client in sortedClients:
			lines.append("  %4d: %s" % (count, client))
		
		sortedReferers = sorted([(v, k) for (k, v) in referers.iteritems()], reverse = True)[0:N]
		lines.append("Referers (Top %d):" % len(sortedReferers))
		for count, referer in sortedReferers:
			lines.append("  %4d: %s" % (count, referer))
		
		self.setText("\n".join(lines))

class LogCatWindow(gtk.Window):
	def __init__(self, filenames):
		gtk.Window.__init__(self, gtk.WINDOW_TOPLEVEL)

		self.set_title("LogCat")
		self.set_size_request(800, 400)
		self.connect("delete_event", self.on_delete_event)
		self.connect("destroy", self.on_destroy)

		# Both use the FD number as index
		self.tails = {}
		self.tabs = {}

		notebook = gtk.Notebook()
		notebook.set_scrollable(True)
		notebook.popup_enable()
		self.details = LogCatDetails(self)

		vbox = gtk.VPaned()
		self.add(vbox)
		vbox.pack1(notebook, True)
		vbox.pack2(self.details, False)

		tab = LogCatTab(self)
		self.tabs[None] = tab
		label = gtk.Label("Overall")
		notebook.append_page(tab, label)

		for filename in filenames:
			tail = getTail(filename)
			fd = tail.getFD()
			tab = LogCatTab(self)

			self.tails[fd] = tail
			self.tabs[fd] = tab

			tail.start()

			label = gtk.Label(tail.getTitle())
			notebook.append_page(tab, label)

			gobject.io_add_watch(fd, gobject.IO_IN, self.on_io)

		self.show_all()
		self.show()

	def on_delete_event(self, widget, event):
		for fd, tail in self.tails.iteritems():
			tail.requestStop()
			print "Waiting for %s to quit..." % tail.getTitle()
			tail.join()
		return False

	def on_destroy(self, widget):
		gtk.main_quit()

	def on_io(self, fd, cond):
		line = self.tails[fd].getQueue().get()
		parsed = parseLine(line)
		if parsed == None:
			print "Unable to parse line (%s)" % self.tails[fd].getTitle()
			print line
		else:
			self.tabs[fd].addError(parsed)
			self.tabs[None].addError(parsed)
		return True
	
	def setDetails(self, errorList):
		self.details.setErrorList(errorList)

if __name__ == "__main__":
	if len(sys.argv) < 2:
		print >>sys.stderr, "Usage: %s Files..." % sys.argv[0]
		sys.exit(1)

	locale.setlocale(locale.LC_TIME, "C")

	w = LogCatWindow(sys.argv[1:])
	gtk.main()
